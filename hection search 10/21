{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyM6C4JQARH7v3FYpD0zarrB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/s10655010/algorithm_test/blob/master/hection%20search%2010/21\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0TODEZAICFaJ",
        "outputId": "d79b70d6-1142-475f-e4c1-e3e75b8a6dd5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        }
      },
      "source": [
        "import random\n",
        "INDEXBOX=10\n",
        "MAXNUM=7\n",
        "\n",
        "def print_data(data,max_number):\n",
        " print('t/',end='')\n",
        " for i in range(max_number):\n",
        "   print('[%2d] ' %data[i],end='')\n",
        " print()\n",
        "\n",
        "def create_table(num,index):\n",
        "  tmp=num%INDEXBOX\n",
        "  while True:\n",
        "    if index[tmp]==-1:\n",
        "       index[tmp]=num\n",
        "       break\n",
        "    else:\n",
        "      tmp=(tmp+1)%INDEXBOX \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Main\n",
        "index=[None]*INDEXBOX\n",
        "data=[None]*MAXNUM\n",
        "\n",
        "print('原始陣列值')\n",
        "for i in range(MAXNUM):\n",
        "  data[i]=random.randint(1,20)\n",
        "for i in range(INDEXBOX):\n",
        "  index[i]=-1\n",
        "print_data(data,MAXNUM)\n",
        "\n",
        "print('雜湊表內容:')\n",
        "for i in range(MAXNUM):\n",
        "  create_table(data[i],index)\n",
        "  print(' %2d =>' %data[i],end='')\n",
        "  print_data(index,INDEXBOX)\n",
        "\n",
        "print('完成雜湊表:')\n",
        "print_data(index,INDEXBOX)\n",
        "\n",
        "\n",
        "平方法\n",
        "\n",
        "import random\n",
        "INDEXBOX=10\n",
        "MAXNUM=7\n",
        "n=1 #用來記錄次數\n",
        "\n",
        "def print_data(data,max_number):\n",
        " print('t/',end='')\n",
        " for i in range(max_number):\n",
        "   print('[%2d] ' %data[i],end='')\n",
        " print()\n",
        "\n",
        "def create_table(num,index):\n",
        "  tmp=num%INDEXBOX\n",
        "  while True:\n",
        "    if index[tmp]==-1:\n",
        "       index[tmp]=num\n",
        "       n=1\n",
        "       break\n",
        "    else:\n",
        "      if index[tmp] == num:\n",
        "      tmp=(tmp+n)%INDEXBOX #把n之平方加上去n+1\n",
        "      \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Main\n",
        "index=[None]*INDEXBOX\n",
        "data=[None]*MAXNUM\n",
        "\n",
        "print('原始陣列值')\n",
        "for i in range(MAXNUM):\n",
        "  data[i]=random.randint(1,20)\n",
        "for i in range(INDEXBOX):\n",
        "  index[i]=-1\n",
        "print_data(data,MAXNUM)\n",
        "\n",
        "print('雜湊表內容:')\n",
        "for i in range(MAXNUM):\n",
        "  create_table(data[i],index)\n",
        "  print(' %2d =>' %data[i],end='')\n",
        "  print_data(index,INDEXBOX)\n",
        "\n",
        "print('完成雜湊表:')\n",
        "print_data(index,INDEXBOX)\n",
        "\n",
        "再雜錯法\n",
        "\n",
        "\n",
        "import random\n",
        "INDEXBOX=10\n",
        "MAXNUM=7\n",
        "n=0 #用來記錄次數\n",
        "\n",
        "def print_data(data,max_number):\n",
        " print('t/',end='')\n",
        " for i in range(max_number):\n",
        "   print('[%2d] ' %data[i],end='')\n",
        " print()\n",
        "\n",
        "def create_table(num,index):\n",
        "  tmp=num%INDEXBOX\n",
        "  while True:\n",
        "    if index[tmp]==-1:\n",
        "       index[tmp]=num\n",
        "       n=1\n",
        "       break\n",
        "    else:\n",
        "      tmp=(tmp+n*2)%INDEXBOX #把n之平方加上去n+1\n",
        "      \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Main\n",
        "index=[None]*INDEXBOX\n",
        "data=[None]*MAXNUM\n",
        "\n",
        "print('原始陣列值')\n",
        "for i in range(MAXNUM):\n",
        "  data[i]=random.randint(1,20)\n",
        "for i in range(INDEXBOX):\n",
        "  index[i]=-1\n",
        "print_data(data,MAXNUM)\n",
        "\n",
        "print('雜湊表內容:')\n",
        "for i in range(MAXNUM):\n",
        "  create_table(data[i],index)\n",
        "  print(' %2d =>' %data[i],end='')\n",
        "  print_data(index,INDEXBOX)\n",
        "\n",
        "print('完成雜湊表:')\n",
        "print_data(index,INDEXBOX)\n",
        "\n",
        "\n",
        "\n",
        "   \n",
        "\n"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-7-762300982fe0>\"\u001b[0;36m, line \u001b[0;32m66\u001b[0m\n\u001b[0;31m    tmp=(tmp+n)%INDEXBOX #把n平方加上去n+1\u001b[0m\n\u001b[0m      ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block\n"
          ]
        }
      ]
    }
  ]
}